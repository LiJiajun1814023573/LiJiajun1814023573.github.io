<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>事件循环EventLoop</title>
    <url>/2020/06/02/js%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="事件循环EventLoop-一"><a href="#事件循环EventLoop-一" class="headerlink" title="事件循环EventLoop(一)"></a>事件循环EventLoop(一)</h1><h2 id="运行时概念"><a href="#运行时概念" class="headerlink" title="运行时概念"></a>运行时概念</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul>
<li>函数调用形成若干帧组成栈<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3></li>
<li>对于js，对象处于堆中(非结构化的内存区域)<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3></li>
<li>js运行时，会包含一个待处理消息的消息队列，而每个消息会有对应回调函数来处理消息．</li>
<li>在EventLoop的某个时刻开始，运行时优先处理先进入队列中的消息，然后被处理后移除队列，<red>作为参数来调用与之关联的函数</red>，即为该函数创建一个栈帧．此处反映了消息队列与执行栈之间彼此隔离而又互相联系的关系．</li>
<li>函数处理会处理直至栈为空，然后事件循环会读取下一个信息(注意理解这一点，对于判断事件循环带来的程序块执行先后顺序问题有很大帮助)<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似于如此调用</p>
<h3 id="执行至完成"><a href="#执行至完成" class="headerlink" title="执行至完成"></a>执行至完成</h3><ul>
<li>每个消息完整的执行后，执行其它消息</li>
<li>　它当一个函数在执行时，不会被抢占，同时只有在它运行结束之后才能运行其它代码，这与C语言不同，如如果函数在线程中运行，可以在任何地方被终止,然后在另一个线程中运行其它代码．</li>
<li>缺点在于当一个消息占用太多时间来处理时，web应用会无法处理与用户的交互，<br>因此需要减少单独处理时间，或是分割处理多个子消息．</li>
</ul>
<h3 id="添加消息"><a href="#添加消息" class="headerlink" title="添加消息"></a>添加消息</h3><ul>
<li>事件发生并且有事件监听器绑定在该事件上时，会把一个消息添加到消息队列．无事件监听器，消息会消失</li>
<li>例如一个点击事件处理器的元素被点击，会像其它事件一样产生一个类似的消息．</li>
<li>setTimeOut实际上就包含了两个参数，第一个参数是消息，所以第二个参数反应的延迟时间不一定是真实的，而是要看消息队列中有没有正在处理的消息，若有，则需要等待处理完毕，然后会将消息添加到消息队列．</li>
<li>如果队列无消息并且栈也为空，则这段延迟过后，会马上处理消息．<h2 id="永不阻塞"><a href="#永不阻塞" class="headerlink" title="永不阻塞"></a>永不阻塞</h2></li>
<li>js事件循环模型使得与其他语言不同，它永不阻塞．处理I/O通常通过事件和回调来执行．<br>所以当一个应用正等待一个 IndexedDB 查询返回或者一个 XHR 请求返回时，它仍然可以处理其它事情，比如用户输入。</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript的内存管理</title>
    <url>/2020/05/31/js%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><center>内存管理</center></h1><h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><ul>
<li>分配你所需要的内存</li>
<li>使用分配到的内存读写</li>
<li>不需要时将其释放\归还</li>
</ul>
<h2 id="javascript的内存分配"><a href="#javascript的内存分配" class="headerlink" title="javascript的内存分配"></a>javascript的内存分配</h2><ul>
<li>值初始化</li>
<li>函数调用</li>
<li>使用值<ul>
<li>对分配内存进行读取和写入的操作，读取和写入可能是写入一个变量或者一个对象的属性值，传递函数参数</li>
</ul>
</li>
<li>不需要时释放<ul>
<li>垃圾回收器跟踪内存分配和使用，当分配内存不使用时自动释放．近似过程，无法判定</li>
</ul>
</li>
</ul>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ul>
<li>引用<ul>
<li>在内存管理的environment中，一个对象如果有访问另一个对象的权限，就叫一个对象引用另一个对象．对象对它原型的引用(隐式引用)，对它属性的引用(显式引用)．</li>
<li>对象包括函数作用域(全局词法作用域)<a id="more"></a></li>
</ul>
</li>
<li>引用计数垃圾收集<ul>
<li>最初级的垃圾收集算法</li>
<li>对象是否不再需要-&gt;对象有没有被其他对象引用，如果为0引用，对象被垃圾回收机制回收</li>
<li>限制：循环引用</li>
</ul>
</li>
<li>标记-清除算法<ul>
<li>对象是否不再需要-&gt;对象是否可以获得</li>
<li>定期从root对象-&gt;root引用的对象-&gt;…</li>
<li>可以获得所有可获得的对象和收集所有不可获得的对象</li>
<li>有0引用的对象总是不可获得的，但反之不一定，如循环引用(函数内部)<ul>
<li>函数调用返回之后，对象从全局作用域下无法获得，所以定期会被垃圾回收器回收到．</li>
</ul>
</li>
<li>限制：无法从根对象查询到的对象</li>
</ul>
</li>
<li>简化定义一定有限制</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
