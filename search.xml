<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flutter系列之dart事件循环</title>
    <url>/2020/07/01/dart%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>上一篇介绍了dart基础．这一篇将讲述flutter代码的执行和运行的机制．</p>
<h1 id="Dart单线程"><a href="#Dart单线程" class="headerlink" title="Dart单线程"></a><span style="color:#00e079">Dart单线程</span></h1><ul>
<li>类比js．js单线程关键点在于主线程，微任务与宏任务．<br>  *　主线程－主业务逻辑<ul>
<li>异步，网络I/O,本地文件I/O,采用事件驱动执行    </li>
</ul>
</li>
<li>dart中单线程执行，其中包含两个事件队列，一个是微任务事件队列，一个是事件队列(对应于js的宏任务)<br>  -　微任务队列：scheduleMicrotask调度<ul>
<li>事件队列: 包含外部事件，如I/O,Timer,绘制事件等等<h2 id="事件循环过程"><a href="#事件循环过程" class="headerlink" title="事件循环过程"></a>事件循环过程</h2></li>
</ul>
</li>
</ul>
<ol>
<li>执行main函数，产生微任务和事件任务队列</li>
<li>判断是否存在微任务，有则执行，执行完后再判断是否还存在微任务，没则判断是否存在事件任务（即每当一个任务执行完成后，微任务会执行到微任务队列清空再去看事件队列是否有任务)</li>
<li>如果有事件任务，执行完后再判断是否还有微任务，如果有先执行微任务．如2</li>
<li>在微任务和宏任务执行时，也会产生新的微任务和事件任务．<a id="more"></a>
来看两道常见的例题<br>例1.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;dart:async&#39;; </span><br><span class="line">void main() </span><br><span class="line">&#123; print(&#39;flow start&#39;); &#x2F;&#x2F; 执行打印开始  </span><br><span class="line">&#x2F;&#x2F; 执行判断为事件任务，添加到事件任务队列 </span><br><span class="line">Timer.run(()&#123;         </span><br><span class="line">    print(&#39;event&#39;); &#x2F;&#x2F; 执行事件任务，打印标记     </span><br><span class="line">&#125;);     </span><br><span class="line">    &#x2F;&#x2F; 执行判断为微任务，添加到微任务队列</span><br><span class="line">scheduleMicrotask(()&#123;          </span><br><span class="line">    print(&#39;microtask&#39;); &#x2F;&#x2F; 执行微任务，打印标记     </span><br><span class="line">&#125;); </span><br><span class="line">    print(&#39;flow end&#39;); &#x2F;&#x2F; 打印结束标记 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flow start </span><br><span class="line">flow end </span><br><span class="line">microtask </span><br><span class="line">event</span><br></pre></td></tr></table></figure>
分析过程：</li>
<li>首先执行main函数中的代码，打印flow start</li>
<li>Timer为事件任务，放入事件队列，scheduleMicrotask为微任务，放入微任务队列，同时向下执行代码打印flow end</li>
<li>先从微任务队列中取出微任务执行，因此打印microtask</li>
<li>微任务队列为空，则从事件任务队列中取出事件任务执行，打印event<br>例2.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;dart:async&#39;; </span><br><span class="line">void main() &#123; </span><br><span class="line">    print(&#39;flow start&#39;); &#x2F;&#x2F; 执行打印开始   </span><br><span class="line">    &#x2F;&#x2F; 执行判断为事件任务，添加到事件任务队列 </span><br><span class="line">    Timer.run(()&#123;          </span><br><span class="line">        print(&#39;event&#39;); &#x2F;&#x2F; 执行事件任务，打印事件任务记  </span><br><span class="line">        &#x2F;&#x2F; 执行判断为微任务，添加到微任务队列          scheduleMicrotask(()&#123;          </span><br><span class="line">            print(&#39;microtask in event&#39;); </span><br><span class="line">            &#x2F;&#x2F; 执行微任务，打印微任务标记    </span><br><span class="line">             &#125;);     </span><br><span class="line">        &#125;);   &#x2F;&#x2F; 执行判断为微任务，添加到微任务队列  scheduleMicrotask(()&#123;          </span><br><span class="line">            print(&#39;microtask&#39;); &#x2F;&#x2F; 执行微任务，打印微任务执行标记         </span><br><span class="line">            &#x2F;&#x2F; 执行判断为事件任务，添加到事件任务队列 Timer.run(()&#123;          </span><br><span class="line">                print(&#39;event in microtask&#39;); &#x2F;&#x2F; 执行事件任务，打印事件任务标记    </span><br><span class="line">            &#125;);     </span><br><span class="line">        &#125;); </span><br><span class="line">        print(&#39;flow end&#39;); &#x2F;&#x2F; 打印结束标记 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flow start </span><br><span class="line">flow end </span><br><span class="line">microtask </span><br><span class="line">event </span><br><span class="line">microtask in event </span><br><span class="line">event in microtask</span><br></pre></td></tr></table></figure>
分析过程：</li>
<li>main函数中代码先执行打印flow start</li>
<li>Timer,为事件任务，放入事件任务队列．</li>
<li>代码向下执行，scheduleMicrotask为微任务，放入微任务队列</li>
<li>继续向下执行，打印flow end</li>
<li>此时，微任务队列中有任务，因此执行scheduleMicrotask中代码，先print microtask,然后Timer放入事件任务队列</li>
<li>微任务队列为空，因此去事件任务队列取出最先放入队列中的事件任务．打印event,向下遇到scheduleMicrotask，放入微任务队列．</li>
<li>事件任务执行完毕后，由于微任务队列中有任务，所以执行微任务．因此先打印microtask in event．</li>
<li>最后执行事件任务队列中的打印event in microtask<h1 id="引发出的一个问题"><a href="#引发出的一个问题" class="headerlink" title="引发出的一个问题"></a><span style="color:#00e079">引发出的一个问题</span></h1></li>
</ol>
<ul>
<li>dart在运行过程中可能被事件运行卡住</li>
<li>可想而知的是，当事件任务执行时，如果进行了密集计算，其中等待事件任务执行结束的时间就会增长．</li>
<li>而从事件循环．我们知道如果当前事件任务没有执行结束，是无法进行下一轮循环的．因此整个dart运行就会被卡住．</li>
<li>因此避免由于事件密集计算而导致较差的用户体验．</li>
</ul>
<p>关于dart多线程内容，我们放在下一篇博客中介绍，届时我们会对dart运行原理大概有一个整体的掌握．然后就会进入flutter的学习之中．</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>dart</tag>
        <tag>flutter</tag>
        <tag>事件循环</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter系列之dart基础</title>
    <url>/2020/06/29/dart%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
    <content><![CDATA[<p>由于近期有学习flutter的兴趣，因此首先学习其所需的编程语言dart.并采用dart与js对比差异的方式来进行学习．</p>
<h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a><span style="color:#00e079">基础数据类型</span></h1><ul>
<li><p>Number和String与js使用基本一致</p>
<h2 id="Symbol的区别"><a href="#Symbol的区别" class="headerlink" title="Symbol的区别"></a>Symbol的区别</h2><ul>
<li><p>js中，Symbol是将基础数据类型转换为唯一标识符，核心应用是将复杂引用数据类型转换为对象数据类型的键名．具体可参考<a href="https://www.jianshu.com/p/4da037782be9" target="_blank" rel="noopener">js中Symbol,map,set</a></p>
</li>
<li><p>在 Dart 中，Symbol 是不透明的动态字符串名称，用于反映库中的元数据。用 Symbol 可以获得或引用类的一个镜像，概念比较复杂，但其实和 JavaScript 的用法基本上是一致的。例如，下面代码首先 new 了一个 test 为 Map 数据类型，设置一个属性 #t（Symbol 类型），然后分别打印 test、test 的 #t、test 的 Symbol(“t”) 和 #t。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123; Map test &#x3D; new Map(); </span><br><span class="line">  test[#t] &#x3D; &#39;symbol test&#39;; </span><br><span class="line">  print(test); </span><br><span class="line">  print(test[#t]); </span><br><span class="line">  print(test[Symbol(&#39;t&#39;)]); </span><br><span class="line">  print(#t);</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">flutter: &#123;Symbol(&quot;t&quot;): symbol test&#125; flutter: symbol test flutter: symbol test flutter: Symbol(&quot;t&quot;)</span><br></pre></td></tr></table></figure>
<p>#t与Symbol(“t”)结果一致，由此可见，dart中的symbol更像是一个反射概念，而在js中是创建唯一标识的概念．</p>
<a id="more"></a>
<h2 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h2></li>
</ul>
</li>
<li><p>dart与js不同，dart是静态脚本语言，所以如果没有定义一个变量无法通过编译，js是存在脚本在运行期间变量没定义的情况．</p>
</li>
<li><p>为了避免因为一个变量无法通过编译，dart中不采用undefined，而是使用null,dart中null是弱类型object的子类型，不是基础数据类型．而所有数据类型，被初始化后没有被赋值的话自动赋值为null类型．</p>
<h2 id="Map和List"><a href="#Map和List" class="headerlink" title="Map和List"></a>Map和List</h2></li>
<li><p>与js中Array和Map基本一致，但在js中不是基本数据类型，属于引用数据类型．分类不同，在用法和类型上没有什么差异．</p>
<h2 id="弱类型-var-object及dynamic"><a href="#弱类型-var-object及dynamic" class="headerlink" title="弱类型-var,object及dynamic"></a>弱类型-var,object及dynamic</h2></li>
<li><p>dart也存在弱类型，使用var,object,dynamic来声明，同时为了避免弱类型导致客户端Crash的异常，Dart对弱类型加强了检验．</p>
</li>
<li><p>var声明，第一次赋值将数据类型绑定，如果再更改类型，会在dart编译前就报错．</p>
</li>
<li><p>object声明相当于js中的var声明赋值，在编译期间，object会对数据调用做一定判断并且报错，声明与调用必须是对应的类型．如声明为String类型，调用length就会报错．由于数据可能来自接口层，所以减少使用以避免运行时报错导致客户端Crash的异常．</p>
</li>
<li><p>dynamic也是动态数据类型，但数据类型调用异常时只会在运行时报错，不会在编译前和编译期间导致报错，所以这点很危险．</p>
</li>
</ul>
<h1 id="基础运算符"><a href="#基础运算符" class="headerlink" title="基础运算符"></a><span style="color:#00e079">基础运算符</span></h1><ul>
<li>dart是强数据类型因此没有”===”运算符．同时有一些类型测试运算符和js中类型转换以及typeof相似．不加介绍．<h2 id="运算符"><a href="#运算符" class="headerlink" title="??运算符"></a>??运算符</h2></li>
</ul>
<ul>
<li>t??’test’即t!=null?t:’test’<h2 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h2></li>
<li>允许对同一对象或者函数进行一系列操作，依次调用方法<br>如<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">testObj.add(&#39;t&#39;)</span><br><span class="line">...delete(&#39;a&#39;)</span><br><span class="line">...show()</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><span style="color:#00e079">函数</span></h1></li>
</ul>
<ul>
<li>明显区别就是dart由于是强数据类型，所以在声明函数的时候可以增加一个返回值类型．<h1 id="类"><a href="#类" class="headerlink" title=" 类"></a><span style="color:#00e079"> 类</span></h1><h2 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h2></li>
<li>支持多个构造函数，实例化可以有选择<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class People&#123;</span><br><span class="line">    String face;</span><br><span class="line">    People.nice()&#123;</span><br><span class="line">        this.face &#x3D; &#39;nice&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    People.bad()&#123;</span><br><span class="line">        this.face &#x3D; &#39;bad&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void main(List&lt;String&gt;args)&#123;</span><br><span class="line">    People niceOne &#x3D; new People.nice();</span><br><span class="line">    print(niceOne.face);</span><br><span class="line">    People badOone &#x3D; new Poeple.bad();</span><br><span class="line">    print(badOne.face)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果不言而喻<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2></li>
</ul>
<ul>
<li>需要设置私有属性，就在方法或者属性前添加’_’<h2 id="抽象类和泛型类"><a href="#抽象类和泛型类" class="headerlink" title="抽象类和泛型类"></a>抽象类和泛型类</h2></li>
</ul>
<h1 id="库与调用"><a href="#库与调用" class="headerlink" title="库与调用"></a><span style="color:#00e079">库与调用</span></h1><h2 id="dart库管理"><a href="#dart库管理" class="headerlink" title="dart库管理"></a>dart库管理</h2><ul>
<li>库管理资源pub.dev中找到需要的库．在dart配置文件pubspec.yaml中添加就可以使用该库，就像在js的package.json中添加声明一样，也有dependencies和dev_dependencies<h2 id="开发dart库"><a href="#开发dart库" class="headerlink" title="开发dart库"></a>开发dart库</h2></li>
</ul>
<ul>
<li>开发好的库发表在pub.dev就可以了，和npm管理一致．如何发布按照官网</li>
<li>pubspec就像package一样，lib下，核心是对应的库文件.dart，是包含一个dart类，所以可以将私有方法用_保护，其他的可以被引用的模块调用．自己开发的无须发布在pub.dev的实现逻辑，可以放在src下．<h2 id="调用dart库．"><a href="#调用dart库．" class="headerlink" title="调用dart库．"></a>调用dart库．</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:startup_namer&#x2F;pages&#x2F;homepage.dart&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中package表示协议，比http好，避免性能影响，然后是库名/项目名，lib下的一个文件夹，具体引入的库文件名</li>
<li>比相对路径的方式要好，建议采用package方式，保证项目代码一致性</li>
</ul>
<p>其中本篇文章提到的关于js中引用数据类型，以及前端工程化包括webpack,npm script会在后续整理后出相关文章．</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>dart</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环EventLoop(一)</title>
    <url>/2020/06/02/js%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEventLoop(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="运行时概念"><a href="#运行时概念" class="headerlink" title="运行时概念"></a><span style="color:#00e079">运行时概念</span></h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul>
<li><p>函数调用形成若干帧组成栈</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2></li>
<li><p>对于js，对象处于堆中(非结构化的内存区域)</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2></li>
<li><p>js运行时，会包含一个待处理消息的消息队列，而每个消息会有对应回调函数来处理消息．</p>
</li>
<li><p>在EventLoop的某个时刻开始，运行时优先处理先进入队列中的消息，然后被处理后移除队列，<span style="color:red">作为参数来调用与之关联的函数</span>，即为该函数创建一个栈帧．此处反映了消息队列与执行栈之间彼此隔离而又互相联系的关系．</p>
</li>
<li><p>函数处理会处理直至栈为空，然后事件循环会读取下一个信息(注意理解这一点，对于判断事件循环带来的程序块执行先后顺序问题有很大帮助)</p>
<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a><span style="color:#00e079">事件循环</span></h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似于如此调用</p>
<h2 id="执行至完成"><a href="#执行至完成" class="headerlink" title="执行至完成"></a>执行至完成</h2></li>
<li><p>每个消息完整的执行后，执行其它消息</p>
</li>
<li><p>　它当一个函数在执行时，不会被抢占，同时只有在它运行结束之后才能运行其它代码，这与C语言不同，如如果函数在线程中运行，可以在任何地方被终止,然后在另一个线程中运行其它代码．</p>
</li>
<li><p>缺点在于当一个消息占用太多时间来处理时，web应用会无法处理与用户的交互，<br>因此需要减少单独处理时间，或是分割处理多个子消息．</p>
<h2 id="添加消息"><a href="#添加消息" class="headerlink" title="添加消息"></a>添加消息</h2></li>
<li><p>事件发生并且有事件监听器绑定在该事件上时，会把一个消息添加到消息队列．无事件监听器，消息会消失</p>
</li>
<li><p>例如一个点击事件处理器的元素被点击，会像其它事件一样产生一个类似的消息．</p>
</li>
<li><p>setTimeOut实际上就包含了两个参数，第一个参数是消息，所以第二个参数反应的延迟时间不一定是真实的，而是要看消息队列中有没有正在处理的消息，若有，则需要等待处理完毕，然后会将消息添加到消息队列．</p>
</li>
<li><p>如果队列无消息并且栈也为空，则这段延迟过后，会马上处理消息．</p>
<h1 id="永不阻塞"><a href="#永不阻塞" class="headerlink" title="永不阻塞"></a><span style="color:#00e079">永不阻塞</span></h1></li>
<li><p>js事件循环模型使得与其他语言不同，它永不阻塞．处理I/O通常通过事件和回调来执行．<br>所以当一个应用正等待一个 IndexedDB 查询返回或者一个 XHR 请求返回时，它仍然可以处理其它事情，比如用户输入。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript的内存管理</title>
    <url>/2020/05/31/js%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a><span style="color:#00e079">内存生命周期</span></h1><ul>
<li>分配你所需要的内存</li>
<li>使用分配到的内存读写</li>
<li>不需要时将其释放\归还</li>
</ul>
<h1 id="javascript的内存分配"><a href="#javascript的内存分配" class="headerlink" title="javascript的内存分配"></a><span style="color:#00e079">javascript的内存分配</span></h1><ul>
<li>值初始化</li>
<li>函数调用</li>
<li>使用值<ul>
<li>对分配内存进行读取和写入的操作，读取和写入可能是写入一个变量或者一个对象的属性值，传递函数参数</li>
</ul>
</li>
<li>不需要时释放<ul>
<li>垃圾回收器跟踪内存分配和使用，当分配内存不使用时自动释放．近似过程，无法判定</li>
</ul>
</li>
</ul>
<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title=" 垃圾回收"></a><span style="color:#00e079"> 垃圾回收</span></h1><ul>
<li>引用<ul>
<li>在内存管理的environment中，一个对象如果有访问另一个对象的权限，就叫一个对象引用另一个对象．对象对它原型的引用(隐式引用)，对它属性的引用(显式引用)．</li>
<li>对象包括函数作用域(全局词法作用域)<a id="more"></a></li>
</ul>
</li>
<li>引用计数垃圾收集<ul>
<li>最初级的垃圾收集算法</li>
<li>对象是否不再需要-&gt;对象有没有被其他对象引用，如果为0引用，对象被垃圾回收机制回收</li>
<li>限制：循环引用</li>
</ul>
</li>
<li>标记-清除算法<ul>
<li>对象是否不再需要-&gt;对象是否可以获得</li>
<li>定期从root对象-&gt;root引用的对象-&gt;…</li>
<li>可以获得所有可获得的对象和收集所有不可获得的对象</li>
<li>有0引用的对象总是不可获得的，但反之不一定，如循环引用(函数内部)<ul>
<li>函数调用返回之后，对象从全局作用域下无法获得，所以定期会被垃圾回收器回收到．</li>
</ul>
</li>
<li>限制：无法从根对象查询到的对象</li>
</ul>
</li>
<li>简化定义一定有限制</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
